/* REXX    FTIMPORT   Imports data from one FT-type table to another.
                      Adjunct to FAMTREE.  Call as:
                           FTIMPORT <familyA.seqA> UNDER <familyB.seqB>
                      The assumption is that each table has a matching
                      entry under the appropriate parent line.  That is:
                      the key for familyA and the key for familyB are
                      the same COUPLE and exist in HIS table and HER
                      table.
           Use '(routine name)  ?' for HELP-text.

           Written by Frank Clarke  rexxhead@yahoo.com 20211102

     Impact Analysis
.    SYSEXEC   TRAPOUT

     Modification History
     20211209 fxc add new fields of FT-form table: FTSPBD FTSPDD FTEMAIL
                  FTSPEML;
     20230723 fxc modernize logging;
     20230726 fxc adjust HELP;
     20230729 fxc clip long lines;
     20230806 fxc chg SYSPROC to SYSEXEC in Impact Analysis;
     20230810 fxc set msglim based on screen width;
     20230908 fxc set log lrecl to 255;
     20231004 fxc correct HELP;
     20240308 fxc chg dollar-sign to @ everywhere;
     20240415 fxc DUMP_QUEUE quiet;

*/ arg argline
address TSO                            /* REXXSKEL ver.20210402      */
arg parms "((" opts

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc = Trace("O"); rc = Trace(tv)
info   = parms                         /* to enable parsing          */

call A_INIT                            /* Initialize                -*/
"NEWSTACK"
call G_GET_SOURCE_LINES                /* TBGET                     -*/
call L_LOAD_NEW_LINES                  /* TBMOD                     -*/
"DELSTACK"
call ZB_SAVELOG                        /*                           -*/

if \sw.nested then call DUMP_QUEUE 'quiet' /*                       -*/
exit                                   /*@ FTIMPORT                  */
/*
.  ----------------------------------------------------------------- */
A_INIT:                                /*@                           */
   if branch then call BRANCH
   address TSO

   call AA_SETUP_LOG                   /*                           -*/
   call AK_KEYWDS                      /*                           -*/
   alpha  = "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
   openmode.   = "WRITE"
   openmode.1  = "NOWRITE"

return                                 /*@ A_INIT                    */
/*
.  ----------------------------------------------------------------- */
AA_SETUP_LOG:                          /*@                           */
   if branch then call BRANCH
   address TSO

   msglim = SYSVAR( "SYSWTERM" ) - 12
   parse value "0 0 0 0 0" with,
                log#    log.  .
   parse value Date("S")  Time("S")  Time("N")  with,
               yyyymmdd   sssss      hhmmss  .
   hhmmss = Space( Translate( hhmmss,' ',':' ) ,0 )
   parse var yyyymmdd  4 yrdigit 5 mm 7 dd          /* 9 12 14 maybe */
   if Pos(yrdigit,"13579") > 0 then mm = mm + 12       /* mm=24      */
   logtag = Substr("ABCDEFGHIJKLMNOPQRSTUVWX",mm,1)    /* logtag=X   */
   subid  = logtag""dd""Left(  hhmmss,4 )              /* X141743  ? */
   vb4k.0    = "NEW CATALOG UNIT(SYSDA) SPACE(1 5) TRACKS",
               "RECFM( V B ) LRECL( 255 ) BLKSIZE( 0 )"
   logdsn = "@LOG."exec_name"."subid".LIST"

   logpref = "("Branch( "ID" )")"
   call ZL_LOGMSG( logpref,
      exec_name "started by" Userid() yyyymmdd hhmmss )
   call ZL_LOGMSG( logpref  "Arg:" argline )
   call ZL_LOGMSG( logpref  "ISPTLIB set to" isptlib )
   call ZL_LOGMSG( logpref  "ISPTABL set to" isptabl )
   call ZL_LOGMSG( logpref  "TBLTYP set to" tbltyp )

return                                 /*@ AA_SETUP_LOG              */
/*
   Parse parameters
.  ----------------------------------------------------------------- */
AK_KEYWDS:                             /*@                           */
   if branch then call BRANCH
   address TSO

   tgtkey    = KEYWD( "UNDER" )        /* target=family.key          */
   parse var info   srckey  info       /* source=family.key          */

   if tgtkey = "" then,
      helpmsg = "'UNDER tgtkey' is a REQUIRED specification."
   if srckey = "" then,
      helpmsg = helpmsg " 'srckey' is a REQUIRED specification."
   if helpmsg <> "" then do
      helpmsg = Strip(helpmsg)
      call HELP                        /* ...and don't come back    -*/
      end

   parse var srckey  srcfam "." srcseq .
   if srcseq = "" then,
      helpmsg  = "The format of 'srckey' is 'tablename.FTSEQ'.  You",
                 "sent" srckey".  "
   parse var tgtkey  tgtfam "." tgtseq .
   if tgtseq = "" then,
      helpmsg  = "The format of 'tgtkey' is 'tablename.FTSEQ'.  You",
                 "sent" tgtkey"."
   if helpmsg <> "" then do
      helpmsg = Strip(helpmsg)
      call HELP                        /* ...and don't come back    -*/
      end

   if info <> "" then do               /* extraneous parms?          */
      helpmsg = "Unrecognized parameters:" info
      call HELP                        /* ...and don't come back    -*/
      end

   srcklen   = Length( srcseq )        /* length of parent FTSEQ     */

return                                 /*@ AK_KEYWDS                 */
/*
   Using tablename=srcfam and ftseq=srcseq, queue all lines in the
   family of <srcseq> except the actual <srcseq>.
.  ----------------------------------------------------------------- */
G_GET_SOURCE_LINES:                    /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   @tn@   = srcfam
   "LIBDEF  ISPTLIB  DATASET  ID("isptlib")  STACK"
   "TBSTATS" @tn@ "STATUS1(s1) STATUS2(s2)"
   if s1 > 1 then do
      zerrsm = "Table" @tn@ "not available."
      zerrlm = "Table" @tn@ "not found in the ISPTLIB library chain"
      "SETMSG  MSG(ISRZ002)"
      logpref = "("Branch( "ID" )")"
      call ZL_LOGMSG( logpref  zerrsm";" zerrlm )
      sw.0error_found = "1"; return
      end; else,
   if s2 = 1 then do                   /* table is not open          */
      "TBOPEN "   @tn@   "NOWRITE"
      if rc > 4 then do
         sw.0error_found = 1
         zerrsm = "Table did not OPEN"
         zerrlm = "Table" @tn@ "cannot be opened due to prior",
                  "enqueues."
         "SETMSG  MSG(ISRZ002)"
         logpref = "("Branch( "ID" )")"
         call ZL_LOGMSG( logpref  zerrsm";" zerrlm )
         end
      end
   else "TBTOP" @tn@
   "LIBDEF  ISPTLIB"

   logpref = "("Branch( "ID" )")"
   call ZL_LOGMSG( logpref  "Table" @tn@ "opened NOWRITE" )

   "TBVCLEAR" @tn@                     /* zap all variables          */
   ftseq = srcseq                      /* AED maybe                  */
   seql  = Length( srcseq )            /* 3                          */
   last  = Right( srcseq,1 )           /* D                          */
   pt    = Pos( last,alpha ) + 1       /* 5                          */
   next  = Substr( alpha,pt,1 )        /* E                          */
   ftseq2 = Overlay( next,srcseq,seql )/* AEE                        */
   "TBSARG" @tn@ "NAMECOND( FTSEQ,GT , FTSEQ2,LT )"

   do forever
      line = ""
      "TBSCAN" @tn@ "SAVENAME( xvars )"/* next row                   */
      if rc > 0 then leave             /* end of chain               */
      /* package FTSEQ FTNAME FTBIRTH FTDEATH FTSPOUSE FTWEDDT FTTEXT
                 FTSPBD FTSPDD FTEMAIL FTSPEML */
      line   = line 'FTSEQ     ..' ftseq     '..'
      line   = line 'FTNAME    ..' ftname    '..'
      line   = line 'FTBIRTH   ..' ftbirth   '..'
      line   = line 'FTDEATH   ..' ftdeath   '..'
      line   = line 'FTSPOUSE  ..' ftspouse  '..'
      line   = line 'FTWEDDT   ..' ftweddt   '..'
      line   = line 'FTTEXT    ..' fttext    '..'
      line   = line 'FTSPBD    ..' ftspbd    '..'
      line   = line 'FTSPDD    ..' ftspdd    '..'
      line   = line 'FTEMAIL   ..' ftemail   '..'
      line   = line 'FTSPEML   ..' ftspeml   '..'
      parse var xvars "(" xvars ")"    /* peel bananas               */
      if xvars <> "" then do           /* there are extensions       */
         line = line "XVARS .." xvars ".."
         do words( xvars )             /* each xvar                  */
            parse var xvars   xv  xvars
            line = line xv ".."  Value(xv) ".."
         end                           /* words(xvars)               */
         end                           /* xvars                      */
      call ZL_LOGMSG( logpref  "Queued" ftseq ftname )
      queue line
   end                                 /* forever                    */

   "TBEND  " @tn@
   call ZL_LOGMSG( logpref  "Table" @tn@ "closed" )

return                                 /*@ G_GET_SOURCE_LINES        */
/*
   The queue is loaded with all values in KEYPHRS format.  Extract
   and re-key the prefix(srcseq) to prefix(tgtseq).
   Repackage FTSEQ FTNAME FTBIRTH FTDEATH FTSPOUSE FTWEDDT FTTEXT
                   FTSPBD FTSPDD FTEMAIL FTSPEML
.  ----------------------------------------------------------------- */
L_LOAD_NEW_LINES:                      /*@                           */
   if branch then call BRANCH
   address ISPEXEC
   l_tv = trace()                      /* what setting at entry ?    */

   @tn@  = tgtfam
   "LIBDEF  ISPTLIB  DATASET  ID("isptlib")  STACK"
   "TBSTATS" @tn@ "STATUS1(s1) STATUS2(s2)"
   if s1 > 1 then do
      zerrsm = "Table" @tn@ "not available."
      say   zerrsm
      zerrlm = "Table" @tn@ "not found in the ISPTLIB library chain"
      "SETMSG  MSG(ISRZ002)"
      sw.0error_found = "1"; return
      end; else,
   if s2 = 1 then do                   /* table is not open          */
      "TBOPEN "   @tn@   openmode.NOUPDT
      if rc > 4 then do
         sw.0error_found = 1
         zerrsm = "Table did not OPEN"
         zerrlm = "Table" @tn@ "cannot be opened due to prior",
                  "enqueues."
         "SETMSG  MSG(ISRZ002)"
         end
      end
   else "TBTOP" @tn@
   "LIBDEF  ISPTLIB"
   logpref = "("Branch( "ID" )")"
   call ZL_LOGMSG( logpref  "Table" @tn@ "opened" openmode.NOUPDT )

                                     rc = Trace("O"); rc = trace(l_tv)
   do queued()                         /* every line                 */
      parse pull info                  /* keep as-is                 */
      ftseq     = KEYPHRS(" FTSEQ    " )
      ftseq     = tgtseq || Delstr( ftseq,1,srcklen )
      ftseql    = Length( ftseq )
      ftname    = KEYPHRS(" FTNAME   " )
      ftbirth   = KEYPHRS(" FTBIRTH  " )
      ftdeath   = KEYPHRS(" FTDEATH  " )
      ftspouse  = KEYPHRS(" FTSPOUSE " )
      ftweddt   = KEYPHRS(" FTWEDDT  " )
      fttext    = KEYPHRS(" FTTEXT   " )
      ftspbd    = KEYPHRS(" FTSPBD   " )
      ftspdd    = KEYPHRS(" FTSPDD   " )
      ftemail   = KEYPHRS(" FTEMAIL  " )
      ftspeml   = KEYPHRS(" FTSPEML  " )
      ftseq2    = ftseq
      xvars     = KEYPHRS(" XVARS    " )
      if xvars <> ""  then,
         do words( xvars )
            parse var xvars   xv xvars /* isolate                    */
            fldval = KEYPHRS( xv )
            rc = Value( xv,fldval )    /* loads fldval to xv         */
         end                           /* xvars                      */
                                     rc = Trace("O"); rc = trace(l_tv)
      "TBMOD"  @tn@  "SAVE(" xvars ") "
      zerrlm = "TBMOD of" ftseq ftname "to" @tn@ "completed RC="rc
      call ZL_LOGMSG( logpref  zerrlm )
   end                                 /* queued                     */

   "LIBDEF  ISPTABL  DATASET  ID("isptabl")  STACK"
   if noupdt then "TBEND  " @tn@       /* don't save                 */
             else "TBCLOSE" @tn@
   "LIBDEF  ISPTABL"
   call ZL_LOGMSG( logpref  "Table" @tn@ "closed" )

return                                 /*@ L_LOAD_NEW_LINES          */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   address TSO

   parse value KEYWD( "ISPTLIB" ) "'FCLARKE.OPEN.ISPTLIB'"   with,
               isptlib   .

   parse value KEYWD( "ISPTABL" )  isptlib    with,
               isptabl   .

   parse value KEYWD( "TBLTYP" )  "FT"       with,
               tbltyp    .

return                                 /*@ LOCAL_PREINIT             */
/*   subroutines below LOCAL_PREINIT are not selected by SHOWFLOW    */
/*
     Find where code was run from.  It assumes cataloged data sets.

     Original by Doug Nadel
     With SWA code lifted from Gilbert Saint-flour's SWAREQ exec
.  ----------------------------------------------------------------- */
FIND_ORIGIN: Procedure                 /*@                           */
answer="* UNKNOWN *"                   /* assume disaster            */
Parse Source . . name dd ds .          /* get known info             */
Call listdsi(dd "FILE")                /* get 1st ddname from file   */
Numeric digits 10                      /* allow up to 7FFFFFFF       */
If name = "?" Then                     /* if sequential exec         */
  answer="'"ds"'"                      /* use info from parse source */
Else                                   /* now test for members       */
  If sysdsn("'"sysdsname"("name")'")="OK" Then /* if in 1st ds       */
     answer="'"sysdsname"("name")'"    /* go no further              */
  Else                                 /* hooboy! Lets have some fun!*/
    Do                                 /* scan tiot for the ddname   */
      tiotptr=24+ptr(12+ptr(ptr(ptr(16)))) /* get ddname array       */
      tioelngh=c2d(stg(tiotptr,1))     /* nength of 1st entry        */
      Do Until tioelngh=0 | tioeddnm = dd /* scan until dd found     */
        tioeddnm=strip(stg(tiotptr+4,8)) /* get ddname from tiot     */
        If tioeddnm <> dd Then         /* if not a match             */
          tiotptr=tiotptr+tioelngh     /* advance to next entry      */
        tioelngh=c2d(stg(tiotptr,1))   /* length of next entry       */
      End
      If dd=tioeddnm Then,             /* if we found it, loop through
                                          the data sets doing an swareq
                                          for each one to get the
                                          dsname                     */
        Do Until tioelngh=0 | stg(4+tiotptr,1)<> " "
          tioejfcb=stg(tiotptr+12,3)
          jfcb=swareq(tioejfcb)        /* convert SVA to 31-bit addr */
          dsn=strip(stg(jfcb,44))      /* dsname JFCBDSNM            */
          vol=storage(d2x(jfcb+118),6) /* volser JFCBVOLS (not used) */
          If sysdsn("'"dsn"("name")'")='OK' Then,  /* found it?      */
            Leave                      /* we is some happy campers!  */
          tiotptr=tiotptr+tioelngh     /* get next entry             */
          tioelngh=c2d(stg(tiotptr,1)) /* get entry length           */
        End
      answer="'"dsn"("name")'"         /* assume we found it         */
    End
Return answer                          /*@ FIND_ORIGIN               */
/*
.  ----------------------------------------------------------------- */
ptr:  Return c2d(storage(d2x(Arg(1)),4))          /*@                */
/*
.  ----------------------------------------------------------------- */
stg:  Return storage(d2x(Arg(1)),Arg(2))          /*@                */
/*
.  ----------------------------------------------------------------- */
SWAREQ:  Procedure                     /*@                           */
If right(c2x(Arg(1)),1) \= 'F' Then    /* SWA=BELOW ?                */
  Return c2d(Arg(1))+16                /* yes, return sva+16         */
sva = c2d(Arg(1))                      /* convert to decimal         */
tcb = c2d(storage(21c,4))              /* TCB PSATOLD                */
tcb = ptr(540)                         /* TCB PSATOLD                */
jscb = ptr(tcb+180)                    /* JSCB TCBJSCB               */
qmpl = ptr(jscb+244)                   /* QMPL JSCBQMPI              */
qmat = ptr(qmpl+24)                    /* QMAT QMADD                 */
Do While sva>65536
  qmat = ptr(qmat+12)                  /* next QMAT QMAT+12          */
  sva=sva-65536                        /* 010006F -> 000006F         */
End
return ptr(qmat+sva+1)+16              /*@ SWAREQ                    */
/*
.  ----------------------------------------------------------------- */
ZB_SAVELOG:                            /*@                           */
   if branch then call BRANCH
   address TSO

   if Symbol("LOG#") = "LIT" then return          /* not yet set     */

   "ALLOC FI(@LOG) DA("logdsn") REU" vb4k.0
   "EXECIO" log# "DISKW @LOG (STEM LOG. FINIS"
   "FREE  FI(@LOG)"

return                                 /*@ ZB_SAVELOG                */
/*
.  ----------------------------------------------------------------- */
ZL_LOGMSG: Procedure expose,           /*@                           */
   (tk_globalvars)  log. log#  msglim
   rc = Trace("O")
   address TSO

   parse arg msgtext

   /* for making the msgline always reasonably short:                */
   do while Length(msgtext) > msglim
      pt    = LastPos(" ",msgtext,msglim)
      slug  = Left(msgtext,pt)
      if monitor then say,
         slug
      parse value  log#+1  slug        with,
                   zz      log.zz    1  log#   .
      msgtext = "       "Substr(msgtext,pt)
   end                                 /* while msglim               */

   parse value  log#+1  msgtext     with,
                zz      log.zz    1  log#   .

   if monitor then say,
      msgtext

return                                 /*@ ZL_LOGMSG                 */
/*
.  ----------------------------------------------------------------- */
HELP:                                  /*@                           */
address TSO;"CLEAR"
if helpmsg <> "" then say helpmsg; say ""
ex_nam = Left(exec_name,8)             /* predictable size           */
say "  "ex_nam"      copies lines from one FT-type table to another.  Use this "
say "                when two FT tables reference the same family.  If the     "
say "                SMITH table is being populated and there are already      "
say "                entries on the JONES table that should exist on both,     "
say "                "ex_nam" will copy the existing rows from JONES over to   "
say "                SMITH.                                                    "
say "                  "ex_nam" JONES.AC   UNDER SMITH.AEB                     "
say "                Any rows in JONES that have keys like AC* will be copied  "
say "                to SMITH with keys like AEB* (except the actual parent    "
say "                rows themselves).                                         "
say "                                                                          "
say "  Syntax:   "ex_nam"  source                                    (Required)"
say "                      UNDER target                              (Required)"
say "                ((    ISPTLIB  intbl                            (Defaults)"
say "                      ISPTABL  totbl                            (Defaults)"
say "                      TBLTYP   gentyp                           (Defaults)"
say "                                                                          "
say "            source    has the form familyA.seqA                           "
say "                                                                          "
say "            target    has the form familyB.seqB                           "
say "                                                                          "
"NEWSTACK"; pull ; "CLEAR" ; "DELSTACK"
say "                                                                          "
say "            intbl     names the input table library.  If not specified, it"
say "                      defaults to 'FCLARKE.OPEN.ISPTLIB'.                 "
say "                                                                          "
say "            totbl     names the output table library.  If not specified,  "
say "                      it defaults to the current setting for <intbl>.     "
say "                                                                          "
say "            gentyp    names the TBLGEN table-type.  If not specified, it  "
say "                      defaults to 'FT'.                                   "
"NEWSTACK"; pull ; "CLEAR" ; "DELSTACK"
say "   Debugging tools provided include:                                      "
say "                                                                          "
say "        MONITOR   displays key information throughout processing.         "
say "                                                                          "
say "        NOUPDT    by-pass all update logic.                               "
say "                                                                          "
say "        BRANCH    show all paragraph entries.                             "
say "                                                                          "
say "        TRACE tv  will use value following TRACE to place the             "
say "                  execution in REXX TRACE Mode.                           "
say "                                                                          "
say "                                                                          "
say "   Debugging tools can be accessed in the following manner:               "
say "                                                                          "
say "        TSO "ex_nam"  parameters     ((  debug-options                    "
say "                                                                          "
say "   For example                                                            "
say "                                                                          "
say "        TSO "ex_nam"  (( MONITOR TRACE ?R                                 "

if sysvar("SYSISPF") = "ACTIVE" then,
   address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   origin = sigl                       /* where was I called from ?  */
   do currln = origin to 1 by -1       /* inch backward to label     */
      if Right(Word(Sourceline(currln),1),1) = ":" then do
         parse value sourceline(currln) with pgfname ":" .  /* Label */
         leave ; end                   /*                name        */
   end                                 /* currln                     */

   select
      when brparm = "NAME" then return(pgfname) /* Return full name  */
      when brparm = "ID"      then do           /* wants the prefix  */
         parse var pgfname pgfpref "_" .        /* get the prefix    */
         return(pgfpref)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left(pgfname,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO
   arg mode .

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   if mode <> "QUIET" then,
   say "Total Stacks" rc ,             /* rc = #of stacks            */
    "   Begin Stacks" tk_init_stacks , /* Stacks present at start    */
    "   Excess Stacks to dump" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      if mode <> "QUIET" then,
      say "Processing Stack #" dd "   Total Lines:" queued()
      do queued();parse pull line;say line;end /* pump to the screen */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/* Handle CLIST-form keywords             added 20020513
.  ----------------------------------------------------------------- */
CLKWD: Procedure expose info           /*@ hide all except info      */
   rc = trace("O")                     /* we do not want to see this */
   arg kw
   kw = kw"("                          /* form is 'KEY(DATA)'        */
   kw_pos = Pos(kw,info)               /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   rtpt   = Pos(") ",info" ",kw_pos)   /* locate end-paren           */
   slug   = Substr(info,kw_pos,rtpt-kw_pos+1)     /* isolate         */
   info   = Delstr(info,kw_pos,rtpt-kw_pos+1)     /* excise          */
   parse var slug (kw)     slug        /* drop kw                    */
   slug   = Reverse(Substr(Reverse(Strip(slug)),2))
return slug                            /*@CLKWD                      */
/* Handle multi-word keys 20020513
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   rc = trace("O")                     /* we do not want to see this */
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+Words(kw))/* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   rc = trace("O")                     /* we do not want to see this */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg,
         "Invalid length for delimiter("dlm") with KEYPHRS("kp")",
         info
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg,
         "No matching second delimiter("dlm") with KEYPHRS("kp")",
         info
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") | \datatype(ssend,"W") then return
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say Strip(sourceline(ssii),'T') ; end
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   rc = trace("O")                     /* we do not want to see this */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":",
                        errortext(rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
   Can call TRAPOUT.
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm,
                     as_invokt  cmd_env  addr_spc  usr_tokn

   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   sw.nested    = sysvar("SYSNEST") = "YES"
   sw.batch     = sysvar("SYSENV")  = "BACK"
   sw.inispf    = sysvar("SYSISPF") = "ACTIVE"

   if Word(parms,1) = "?" then call HELP /* I won't be back          */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   parse value KEYWD("TRACE")  "N"    with   tv  .
   tk_globalvars = "exec_name  tv  helpmsg  sw.  zerrhm  zerralrm ",
                   "zerrsm  zerrlm  tk_init_stacks  branch  monitor ",
                   "noupdt"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
