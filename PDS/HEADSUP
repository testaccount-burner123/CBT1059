/* REXX    HEADSUP    Scans the Birthday list for important
                      anniversaries coming up.
           Use '(routine name)  ?' for HELP-text.

           Written by Frank Clarke  rexxhead@yahoo.com 20240726

     Impact Analysis
.    SYSEXEC   ORDINAL
.    SYSEXEC   TRAPOUT

     Modification History
     20240618 fxc adjusted HELP text;
     20240802 fxc adjusted ordinal calculation;
     20240812 fxc added hyphen to message text; enable FOR to specify
                  a date other than today;
     20240820 fxc add ORDINAL to I/A;
     20250213 fxc add 'no data' message;

*/ arg argline
address TSO                            /* REXXSKEL ver.20240618      */
arg parms "((" opts

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc = Trace("O"); rc = Trace(tv)
info   = parms                         /* to enable parsing          */

call A_INIT                            /*                           -*/
call N_NOTICES                         /*                           -*/

if \sw.0nested then call DUMP_QUEUE 'quiet' /*                      -*/
exit                                   /*@ HEADSUP                   */
/*
.  ----------------------------------------------------------------- */
A_INIT:                                /*@                           */
   if branch then call BRANCH
   address TSO

   call AA_SETUP_LOG                   /*                           -*/
   logpref = "("Branch("ID")")"
   call ZL_LOGMSG( exec_name "started by" Userid()  yyyymmdd  hhmmss )
   call ZL_LOGMSG( logpref "Arg:" argline )

   parse value "0 0 0 0 0 0 0 0 "  with ,
                gap      list.   .
   input = "brthdays.list"

   force  = KEYWD( "FOR" )             /* override date mmdd         */
   if force <> '' then force = Right( force,4,0 )
   parse var force  mmf 3 ddf          /* mm dd                      */

   today  = Date( "S" )
   parse var today yyyy 5 mms 7 dds .
   parse value  mmf mms  with  mms  .  /* use FORCE if specified     */
   parse value  ddf dds  with  dds  .  /* use FORCE if specified     */

   activ   = yyyy''mms''dds            /* rebuild S-date             */
   base    = Date( "B",activ,"S" )

   parse value  base+8  with  base8  .
   parse value  Date( "S",base8,"B" ) with ,
                s_end   .
   parse var s_end  5 mme  7 dde  .
   start  = mms''dds                   /* today                      */
   end    = mme''dde                   /* 8 days hence               */
   sw.0NewYear = start > end

return                                 /*@ A_INIT                    */
/*
.  ----------------------------------------------------------------- */
AA_SETUP_LOG:                          /*@                           */
   if branch then call BRANCH
   address TSO

   msglim = SYSVAR( "SYSWTERM" ) - 12
   parse value "0 0 0 0 0" with,
                log#    log.  .
   parse value Date("S")  Time("S")  Time("N")  with,
               yyyymmdd   sssss      hhmmss  .
   hhmmss = Space( Translate( hhmmss,' ',':' ) ,0 )
   parse var yyyymmdd  4 yrdigit 5 mm 7 dd          /* 9 12 14 maybe */
   if Pos(yrdigit,"13579") > 0 then mm = mm + 12       /* mm=24      */
   logtag = Substr("ABCDEFGHIJKLMNOPQRSTUVWX",mm,1)    /* logtag=X   */
   subid  = logtag""dd""Left(  hhmmss,4 )              /* X141743  ? */
   vb255.0   = "NEW CATALOG UNIT(SYSDA) SPACE(1 5) TRACKS",
               "RECFM( V B ) LRECL( 255 ) BLKSIZE( 0 )"
   vb255.1   = "MOD"                   /* if it already exists...    */
   logdsn = "@LOG."exec_name"."subid".LIST"
   if Sysdsn( logdsn ) = "OK" then,
      call ZL_LOGMSG( "-------------------" )


return                                 /*@ AA_SETUP_LOG              */
/*
.  ----------------------------------------------------------------- */
N_NOTICES:                             /*@                           */
   if branch then call BRANCH
   address TSO

   call NA_GET_DATA                    /*                           -*/
   call NR_REPORT                      /*                           -*/

return                                 /*@ N_NOTICES                 */
/*
   For each selected instance, calc the difference between the origin
   year and this year (the gap).  Calculate the ordinal based on the
   units digit: 1=st, 2=nd, 3=rd, all others=th, except in the range
   10-20 where everything is th.
.  ----------------------------------------------------------------- */
NA_GET_DATA:                           /*@                           */
   if branch then call BRANCH
   address TSO

   logpref = "("Branch("ID")")"
   "ALLOC FI( @TMP ) DA( "input" ) SHR REU "
   "NEWSTACK "
   "EXECIO   *  DISKR @TMP ( FINIS "
   call ZL_LOGMSG( logpref queued() "lines read from input." )
   do queued()
      parse pull  day 5 yr 9 10 type 11 12 occasion
      if sw.0NewYear = 0 then,
      if day  >= start  &  day <= end  then do
         gap = yyyy - yr
         ord = ORDINAL( gap )          /*                            */
         if type = 'W' then text = gap''ord 'Wedding anniv. -' ,
                                 occasion
         if type = 'B' then text = gap''ord 'Birthday -' occasion
         parse value list.0+1  day text   with,
                     @z        list.@z   1  list.0  .
         call ZL_LOGMSG( logpref @z  list.@z )
         end                           /* date selected              */
      if sw.0NewYear = 1 then,         /* spans a year boundary      */
      if day  >= start  |  day <= end  then do
         gap = yyyy - yr
         ord = ORDINAL( gap )          /*                            */
         if type = 'W' then text = gap''ord 'Wedding anniv. -' ,
                                 occasion
         if type = 'B' then text = gap''ord 'Birthday -' occasion
         parse value list.0+1  day text   with,
                     @z        list.@z   1  list.0  .
         call ZL_LOGMSG( logpref @z  list.@z )
         end                           /* date selected              */
   end                                 /* queued                     */
   "DELSTACK "

return                                 /*@ NA_GET_DATA               */
/*
.  ----------------------------------------------------------------- */
NR_REPORT:                             /*@                           */
   if branch then call BRANCH
   address TSO

   if list.0 = 0 then do
      say "No data to process"
      return
      end
   "CLEAR"
   say "Date Occasion"
   say "---- -----------------------"
   do nrx = 1 to list.0
      say list.nrx
   end                                 /* nrx                        */

return                                 /*@ NR_REPORT                 */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   address TSO


return                                 /*@ LOCAL_PREINIT             */
/*   subroutines below LOCAL_PREINIT are not selected by SHOWFLOW    */
/*
.  ----------------------------------------------------------------- */
ZB_SAVELOG:                            /*@                           */
   if branch then call BRANCH
   address TSO

   if Symbol("LOG#") = "LIT" then return          /* not yet set     */

   dsstat = Sysdsn( logdsn ) = "OK"    /* 1 if it exists             */
   "ALLOC FI(@LOG) DA(" logdsn ") REU" vb255.dsstat
   "EXECIO" log# "DISKW @LOG (STEM LOG. FINIS"
   "FREE  FI(@LOG)"

return                                 /*@ ZB_SAVELOG                */
/*
.  ----------------------------------------------------------------- */
ZL_LOGMSG: Procedure expose,           /*@                           */
   (tk_globalvars)  log. log#  msglim
   rc = Trace("O")
   address TSO

   parse arg msgtext

   /* for making the msgline always reasonably short:                */
   do while Length(msgtext) > msglim
      pt    = LastPos(" ",msgtext,msglim)
      slug  = Left(msgtext,pt)
      if monitor then say,
         slug
      parse value  log#+1  slug        with,
                   zz      log.zz    1  log#   .
      msgtext = "       "Substr(msgtext,pt)
   end                                 /* while msglim               */

   parse value  log#+1  msgtext     with,
                zz      log.zz    1  log#   .

   if monitor then say,
      msgtext

return                                 /*@ ZL_LOGMSG                 */
/*
.  ----------------------------------------------------------------- */
HELP:                                  /*@                           */
address TSO;"CLEAR"
if helpmsg <> "" then say helpmsg
ex_nam = Left(exec_name,8)             /* predictable size           */

say "                                                                          "
say "  "ex_nam"      examines BRTHDAYS.LST and reports on birthdays and        "
say "                anniversaries occurring in the next 8 days.               "
say "                                                                          "
say "  Syntax:   "ex_nam"  FOR   mmdd                                          "
say "                                                                          "
say "            mmdd      is a 4-digit month-and-day to be used in preference "
say "                      to today.                                           "
say "                                                                          "
"NEWSTACK"; pull ; "CLEAR" ; "DELSTACK"
say "   Debugging tools provided include:                                      "
say "                                                                          "
say "        MONITOR:  can be used by the programmer to display key information"
say "                  throughout processing.                                  "
say "                                                                          "
say "        BRANCH:   show all paragraph entries.                             "
say "                                                                          "
say "        TRACE tv: will use value following TRACE to place the execution   "
say "                  into REXX TRACE Mode.                                   "
say "                                                                          "
say "                                                                          "
say "   Debugging tools can be accessed in the following manner:               "
say "                                                                          "
say "        TSO "ex_nam"  parameters     ((  debug-options                    "
say "                                                                          "
say "   For example:                                                           "
say "                                                                          "
say "        TSO "ex_nam"  (( MONITOR TRACE ?R                                 "

if sysvar("SYSISPF") = "ACTIVE" then,
   address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   origin = sigl                       /* where was I called from ?  */
   do currln = origin to 1 by -1       /* inch backward to label     */
      if Right(Word(Sourceline(currln),1),1) = ":" then do
         parse value sourceline(currln) with pgfname ":" .  /* Label */
         leave ; end                   /*                name        */
   end                                 /* currln                     */

   select
      when brparm = "NAME" then return(pgfname) /* Return full name  */
      when brparm = "ID"      then do           /* wants the prefix  */
         parse var pgfname pgfpref "_" .        /* get the prefix    */
         return(pgfpref)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left(pgfname,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO
   arg mode .

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   if mode <> "QUIET" then,
   say "Total Stacks" rc ,             /* rc = #of stacks            */
    "   Begin Stacks" tk_init_stacks , /* Stacks present at start    */
    "   Excess Stacks to dump" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      if mode <> "QUIET" then,
      say "Processing Stack #" dd "   Total Lines:" queued()
      do queued();parse pull line;say line;end /* pump to the screen */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/* Handle CLIST-form keywords             added 20020513
.  ----------------------------------------------------------------- */
CLKWD: Procedure expose info           /*@ hide all except info      */
   arg kw
   kw = kw"("                          /* form is 'KEY(DATA)'        */
   kw_pos = Pos(kw,info)               /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   rtpt   = Pos(") ",info" ",kw_pos)   /* locate end-paren           */
   slug   = Substr(info,kw_pos,rtpt-kw_pos+1)     /* isolate         */
   info   = Delstr(info,kw_pos,rtpt-kw_pos+1)     /* excise          */
   parse var slug (kw)     slug        /* drop kw                    */
   slug   = Reverse(Substr(Reverse(Strip(slug)),2))
return slug                            /*@CLKWD                      */
/* Handle multi-word keys 20020513
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+Words(kw))/* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg,
         "Invalid length for delimiter("dlm") with KEYPHRS("kp")",
         info
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg,
         "No matching second delimiter("dlm") with KEYPHRS("kp")",
         info
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") | \datatype(ssend,"W") then return
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say Strip(sourceline(ssii),'T') ; end
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":",
                        errortext(rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
   Can call TRAPOUT.
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm,
                     as_invokt  cmd_env  addr_spc  usr_tokn

   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   sw.0nested   = sysvar("SYSNEST") = "YES"
   sw.0batch    = sysvar("SYSENV")  = "BACK"
   sw.0inispf   = sysvar("SYSISPF") = "ACTIVE"
   parse value KEYWD("TRACE")  "N"    with   tv  .

   if Word(parms,1) = "?" then call HELP /* I won't be back          */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   tk_globalvars = "exec_name  tv  helpmsg  sw.  zerrhm  zerralrm ",
                   "zerrsm  zerrlm  tk_init_stacks  branch  monitor ",
                   "noupdt"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
