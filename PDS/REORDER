/* REXX    REORDER    resequences keys in a FAMTREE (Type=FT) table to
                      place child segments in the proper order.  It is
                      designed to operate on a FLTTBL-copy of an ISPF
                      table, specifically, an FT-type table.  In
                      operation, it prompts for a key (FTSEQ) value that
                      defines the family, then a list of the subkeys
                      that are misplaced and the order in which they
                      should be placed,
.                         e.g.: ADFC BCE CEB
                      Such a specification asks that
.                     all ADFCB* be resequenced to ADFCC*,
.                     all ADFCC* be resequenced to ADFCE*, and
.                     all ADFCE* be resequenced to ADFCB*.
                      That is, the 2nd parm (here, BCE) identifies the
                      segments misplaced, and the 3rd parm identifies
                      the correct order.
.                     To do this, each old key (ADFCB*, ADFCC*, ADFCE*)
                      must be moved to a 'safe place', say ADFC1*,
                      ADFC2*, and ADFC3*.  Then, ADFC1* is rekeyed as
                      ADFCC*, ADFC2* to ADFCE*, and ADFC3* to ADFCB*.
           Use '(routine name)  ?' for HELP-text.

   |**-***-***-***-***-***-***-***-***-***-***-***-***-***-***-***-**|
   |                                                                 |
   |          WARNING: EMBEDDED COMPONENTS.                          |
   |                      See text following TOOLKIT_INIT            |
   |                                                                 |
   |**-***-***-***-***-***-***-***-***-***-***-***-***-***-***-***-**|

           Written by Frank Clarke  rexxhead@yahoo.com 20210528

     Impact Analysis
.    SYSEXEC   FLTTBL
.    SYSEXEC   RSTTBL
.    SYSEXEC   SHUFFLE (macro)
.    SYSEXEC   TRAPOUT

     Modification History
     20211211 fxc HELP-text
     20230723 fxc modernize logging;
     20230726 fxc adjust HELP;
     20230729 fxc clip long lines;
     20230810 fxc set msglim based on screen width;
     20230908 fxc set log lrecl to 255;
     20230911 fxc use ZUP/ZCONT in HELP panels;
     20240305 fxc align panel names;
     20240308 fxc chg dollar-sign to @ everywhere;
     20240404 fxc changed tutorial to scrollable area;
     20240415 fxc DUMP_QUEUE quiet;
     20240610 fxc correct panel attr @642;

*/ arg argline
address TSO                            /* REXXSKEL ver.20210402      */
arg parms "((" opts

signal on syntax
signal on novalue

call TOOLKIT_INIT                      /* conventional start-up     -*/
rc = Trace("O"); rc = Trace(tv)
info   = parms                         /* to enable parsing          */

call A_INIT                            /* Initialization            -*/
                                    if \sw.0error_found then,
call F_FLTTBL                          /* Flatten table             -*/
                                    if \sw.0error_found then,
call O_ORGANIZE                        /* Rearrange children        -*/
                                    if \sw.0error_found then,
call R_RSTTBL                          /* Rebuild table             -*/
if sw.0KeepLog | sw.0Error_Found then,
   call ZB_SAVELOG                     /*                           -*/

if \sw.nested then call DUMP_QUEUE 'quiet' /*                       -*/
exit                                   /*@ REORDER                   */
/*
   Initialization
.  ----------------------------------------------------------------- */
A_INIT:                                /*@                           */
   if branch then call BRANCH
   address TSO

   parse value  124           with,
                msglim   .
   call AL_SETUP_LOG                   /* build log dataset         -*/
   call AT_TABLE_INFO                  /* get table-specific info   -*/

return                                 /*@ A_INIT                    */
/*
   Establish LOG file for diagnostic messages.
.  ----------------------------------------------------------------- */
AL_SETUP_LOG:                          /*@                           */
   if branch then call BRANCH
   address TSO

   msglim = SYSVAR( "SYSWTERM" ) - 12
   parse value "0 0 0 0 0" with,
                log#    log.  .
   parse value Date("S")  Time("S")  Time("N")  with,
               yyyymmdd   sssss      hhmmss  .
   hhmmss = Space( Translate( hhmmss,' ',':' ) ,0 )
   parse var yyyymmdd  4 yrdigit 5 mm 7 dd          /* 9 12 14 maybe */
   if Pos(yrdigit,"13579") > 0 then mm = mm + 12       /* mm=24      */
   logtag = Substr("ABCDEFGHIJKLMNOPQRSTUVWX",mm,1)    /* logtag=X   */
   subid  = logtag""dd""Left(  hhmmss,4 )              /* X141743  ? */
   vb4k.0    = "NEW CATALOG UNIT(SYSDA) SPACE(1 5) TRACKS",
               "RECFM( V B ) LRECL( 255 ) BLKSIZE( 0 )"
   logdsn = "@LOG."exec_name"."subid".LIST"

   logpref = exec_name "("Branch( "ID" )")"
   call ZL_LOGMSG( logpref,
      exec_name "started by" Userid() yyyymmdd hhmmss )
   call ZL_LOGMSG( logpref  "Arg:" argline)

return                                 /*@ AL_SETUP_LOG              */
/*
   Get table-specific information
.  ----------------------------------------------------------------- */
AT_TABLE_INFO:                         /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   call DEIMBED                        /*                           -*/
   dd = ""
   do Words(ddnlist)                   /* each LIBDEF DD             */
      parse value ddnlist dd  with  dd ddnlist
      @ddn   = @ddn.dd                 /* PLIB322 <- PLIB            */
      "LIBDEF  ISP"dd "LIBRARY  ID("@ddn") STACK"
   end
   ddnlist = ddnlist dd

   sw.0Error_Found = '1'               /* prevent no-data            */
   do forever
      "DISPLAY PANEL(TBLSPEC)"
      if rc = 8 then leave             /* PF3 ?                      */
      sw.0Error_Found = '0'            /* clear setting              */
      parse value isptlib "NULL"   with isptlib  .
      if Left(isptlib,1) = "'" then,
         isptabl = Strip(isptlib,,"'")
      else,
         isptabl = Userid()"."isptlib
      dsstat   = Sysdsn( "'"isptabl"'" )
      if dsstat <> "OK" then do
         zerrsm  = "Dataset?"
         zerrlm  = dsstat
         "SETMSG MSG(ISRZ002)"
         sw.0Error_Found = '1'
         if isptlib = "NULL" then isptlib = ""
         iterate
         end
      parse value @tn@    "NULL"   with @tn@     .
      mbrstat  = Sysdsn( "'"isptabl"("@tn@")'")
      if mbrstat <> "OK" then do
         zerrsm  = "Table?"
         zerrlm  = mbrstat
         "SETMSG MSG(ISRZ002)"
         sw.0Error_Found = '1'
         if @tn@    = "NULL" then @tn@    = ""
         iterate
         end
      if Length(inseq) = 0 then do
         zerrsm  = "Sequence?"
         zerrlm  = "There must be input and output sequences."
         "SETMSG MSG(ISRZ002)"
         sw.0Error_Found = '1'
         iterate
         end
      if Length(inseq) <> Length(outseq) then do
         zerrsm  = "Sequence?"
         zerrlm  = "The input sequence and output sequence should have",
                   "the same length."
         "SETMSG MSG(ISRZ002)"
         sw.0Error_Found = '1'
         iterate
         end
      do ii = 1 to Length(inseq)
         if Substr(inseq,ii,1) = Substr(outseq,ii,1) then do
            zerrsm = "Duplicate"
            zerrlm = "Position" ii "in" inseq "is the same as the",
                     "corresponding position in" outseq".  This is",
                     "not allowed."
            "SETMSG MSG(ISRZ002)"
            sw.0Error_Found = '1'
            leave ii
            end
      end                              /* ii                         */
   end                                 /* forever                    */

   dd = ""
   do Words(ddnlist)                   /* each LIBDEF DD             */
      parse value ddnlist dd  with  dd ddnlist
      @ddn   = @ddn.dd                 /* PLIB322 <- PLIB            */
      "LIBDEF  ISP"dd
      address TSO "FREE  FI("@ddn")"
   end
   ddnlist = ddnlist dd

return                                 /*@ AT_TABLE_INFO             */
/*
   Create FLATTBLS.@tn@.  Given:  @TN@ and ISPTABL
.  ----------------------------------------------------------------- */
F_FLTTBL:                              /*@                           */
   if branch then call BRANCH
   address TSO

   "FLTTBL  "@tn@"  IN '"isptabl"'  ADD 200"

return                                 /*@ F_FLTTBL                  */
/*
   Make changes to FLATTBLS.@tn@.  Given: INSEQ, OUTSEQ, and BASE.
.  ----------------------------------------------------------------- */
O_ORGANIZE:                            /*@                           */
   if branch then call BRANCH
   address ISPEXEC

   macparm = "TRACE" tv
   "VPUT ( BASE, INSEQ, OUTSEQ ) SHARED"
   "EDIT  DATASET( FLATTBLS."@tn@" ) MACRO( SHUFFLE ) PARM( macparm )"

return                                 /*@ O_ORGANIZE                */
/*
   Reload FLATTBLS.@tn@ to a real ISPF table and replace the existing.
.  ----------------------------------------------------------------- */
R_RSTTBL:                              /*@                           */
   if branch then call BRANCH
   address TSO

   if noupdt  then return              /* don't restore the table    */
   "RSTTBL" @tn@

return                                 /*@ R_RSTTBL                  */
/*
.  ----------------------------------------------------------------- */
LOCAL_PREINIT:                         /*@ customize opts            */
   address TSO


return                                 /*@ LOCAL_PREINIT             */
/*   subroutines below LOCAL_PREINIT are not selected by SHOWFLOW    */
/*
.  ----------------------------------------------------------------- */
ZB_SAVELOG:                            /*@                           */
   if branch then call BRANCH
   address TSO

   if Symbol("LOG#") = "LIT" then return          /* not yet set     */

   "ALLOC FI(@LOG) DA("logdsn") REU" vb4k.0
   "EXECIO" log# "DISKW @LOG (STEM LOG. FINIS"
   "FREE  FI(@LOG)"

return                                 /*@ ZB_SAVELOG                */
/*
.  ----------------------------------------------------------------- */
ZL_LOGMSG: Procedure expose,           /*@                           */
   (tk_globalvars)  log. log#  msglim
   rc = Trace("O")
   address TSO

   parse arg msgtext

   /* for making the msgline always reasonably short:                */
   do while Length(msgtext) > msglim
      pt    = LastPos(" ",msgtext,msglim)
      slug  = Left(msgtext,pt)
      parse value  log#+1  slug        with,
                   zz      log.zz    1  log#   .
      msgtext = "       "Substr(msgtext,pt)
   end                                 /* while msglim               */
   /* ------ make sure MSGLIM is set and --exposed--                 */

   parse value  log#+1  msgtext     with,
                zz      log.zz    1  log#   .

   if monitor then say,
      msgtext

return                                 /*@ ZL_LOGMSG                 */
/*
   Parse out the embedded components at the back of the source code.

   The components are enclosed in a comment whose start and end are on
   individual lines for easier recognition.

   Each component is identified by a triple-close-paren ")))" in
   column 1 followed by a DDName and a membername.  The text of the
   component begins on the next line.

   There are no restrictions on the DDName, but ISPF assets are treated
   differently than non-ISPF material.  Items to be LIBDEFd should be
   held to 4 character DDNs to accomodate the 'ISP' that will be
   prepended.  Code is supplied below to properly LIBDEF ISPF elements.
   Non-ISPF elements are not LIBDEFd but EXECIOd to a PO/80 dataset
   named for the DDN specified.

.  ----------------------------------------------------------------- */
DEIMBED: Procedure expose,             /*@                           */
   (tk_globalvars)  ddnlist  @ddn.  daid.

   address TSO

   fb80po.0  = "NEW REU UNIT(SYSDA) SPACE(1 5) TRACKS DIR(40)",
                   "RECFM(F B) LRECL(80) BLKSIZE(0)"
   fb80po.1  = "SHR REU"
   parse value ""   with  ddnlist @ddn.  daid.

   lastln   = sourceline()
   currln   = lastln                   /*                            */
   if Left(sourceline(currln),2) <> "*/" then return

   currln = currln - 1                 /* previous line              */
   "NEWSTACK"
   address ISPEXEC
   do while sourceline(currln) <> "/*"
      text = sourceline(currln)        /* save with a short name !   */
      if Left(text,3) = ")))" then do  /* package the queue          */
         parse var text ")))" ddn mbr .   /* PLIB PANL001  maybe     */
         if length(ddn) > 4 then do    /* data, not ISPF             */
            call DESPOOL               /*                           -*/
            currln = currln - 1        /* previous line              */
            iterate
            end
         if Pos(ddn,ddnlist) = 0 then do  /* doesn't exist           */
            ddnlist = ddnlist ddn      /* keep track                 */
            @ddn = ddn || Random(999)  /* PLIB322 maybe              */
            @ddn.ddn = @ddn            /* @ddn.PLIB = PLIB322        */
            address TSO "ALLOC FI("@ddn")" fb80po.0
            "LMINIT DATAID(DAID) DDNAME("@ddn")"
            daid.ddn = daid
            end
         daid = daid.ddn
         "LMOPEN DATAID("daid") OPTION(OUTPUT)"
         do queued()
            parse pull line
            "LMPUT DATAID("daid") MODE(INVAR) DATALOC(LINE) DATALEN(80)"
         end
         "LMMADD DATAID("daid") MEMBER("mbr")"
         "LMCLOSE DATAID("daid")"
         end                           /* package the queue          */
      else push text                   /* onto the top of the stack  */
      currln = currln - 1              /* previous line              */
   end                                 /* while                      */
   address TSO "DELSTACK"
   return
/*
   Subroutine of DEIMBED for non-ISPF data.
   Given: the stack, ddn, and mbr
.  ----------------------------------------------------------------- */
DESPOOL:                               /*@                           */
   if branch then call BRANCH
   address TSO

   if Sysdsn(ddn".DATA") <> "OK" then,
      "ALLOC FI("ddn") DA("ddn".DATA)" fb80po.0
   "ALLOC FI("ddn") DA("ddn".DATA("mbr")) SHR REU"
   "EXECIO" queued() "DISKW" ddn "(FINIS"
   "DELSTACK"
   "NEWSTACK"                          /* re-establish               */

return                                 /*@ DESPOOL                   */

return                                 /*@ DEIMBED                   */
/*
.  ----------------------------------------------------------------- */
HELP:                                  /*@                           */
address TSO;"CLEAR"
if helpmsg <> "" then say helpmsg
ex_nam = Left(exec_name,8)             /* predictable size           */
say "                                                                          "
say "  "ex_nam"      is a subroutine of FAMTREE.  It resequences the rows of a "
say "                FAMTREE table when the order of children is found to be   "
say "                incorrect.  It does this by generating a flat copy of the "
say "                table, and changing the incorrect keys to their correct   "
say "                values, then reloading the table from the corrected flat  "
say "                file.                                                     "
say "                                                                          "
say "  Syntax:   "ex_nam"  no parms                                            "
say "                                                                          "
"NEWSTACK"; pull ; "CLEAR" ; "DELSTACK"
say "   Debugging tools provided include:                                      "
say "                                                                          "
say "        NOUPDT    by-pass all update logic.                               "
say "                                                                          "
say "        BRANCH    show all paragraph entries.                             "
say "                                                                          "
say "        TRACE tv  will use value following TRACE to place the             "
say "                  execution in REXX TRACE Mode.                           "
say "                                                                          "
say "   Debugging tools can be accessed in the following manner:               "
say "                                                                          "
say "        TSO "ex_nam"  parameters     ((  debug-options                    "
say "                                                                          "
say "   For example                                                            "
say "                                                                          "
say "        TSO "ex_nam"  (( BRANCH  TRACE ?R                                 "
if sw.inispf then,
address ISPEXEC "CONTROL DISPLAY REFRESH"
exit                                   /*@ HELP                      */
/*
     Find where code was run from.  It assumes cataloged data sets.

     Original by Doug Nadel
     With SWA code lifted from Gilbert Saint-flour's SWAREQ exec
.  ----------------------------------------------------------------- */
FIND_ORIGIN: Procedure                 /*@                           */
answer="* UNKNOWN *"                   /* assume disaster            */
Parse Source . . name dd ds .          /* get known info             */
Call listdsi(dd "FILE")                /* get 1st ddname from file   */
Numeric digits 10                      /* allow up to 7FFFFFFF       */
If name = "?" Then                     /* if sequential exec         */
  answer="'"ds"'"                      /* use info from parse source */
Else                                   /* now test for members       */
  If sysdsn("'"sysdsname"("name")'")="OK" Then /* if in 1st ds       */
     answer="'"sysdsname"("name")'"    /* go no further              */
  Else                                 /* hooboy! Lets have some fun!*/
    Do                                 /* scan tiot for the ddname   */
      tiotptr=24+ptr(12+ptr(ptr(ptr(16)))) /* get ddname array       */
      tioelngh=c2d(stg(tiotptr,1))     /* nength of 1st entry        */
      Do Until tioelngh=0 | tioeddnm = dd /* scan until dd found     */
        tioeddnm=strip(stg(tiotptr+4,8)) /* get ddname from tiot     */
        If tioeddnm <> dd Then         /* if not a match             */
          tiotptr=tiotptr+tioelngh     /* advance to next entry      */
        tioelngh=c2d(stg(tiotptr,1))   /* length of next entry       */
      End
      If dd=tioeddnm Then,             /* if we found it, loop through
                                          the data sets doing an swareq
                                          for each one to get the
                                          dsname                     */
        Do Until tioelngh=0 | stg(4+tiotptr,1)<> " "
          tioejfcb=stg(tiotptr+12,3)
          jfcb=swareq(tioejfcb)        /* convert SVA to 31-bit addr */
          dsn=strip(stg(jfcb,44))      /* dsname JFCBDSNM            */
          vol=storage(d2x(jfcb+118),6) /* volser JFCBVOLS (not used) */
          If sysdsn("'"dsn"("name")'")='OK' Then,  /* found it?      */
            Leave                      /* we is some happy campers!  */
          tiotptr=tiotptr+tioelngh     /* get next entry             */
          tioelngh=c2d(stg(tiotptr,1)) /* get entry length           */
        End
      answer="'"dsn"("name")'"         /* assume we found it         */
    End
Return answer                          /*@ FIND_ORIGIN               */
/*
.  ----------------------------------------------------------------- */
ptr:  Return c2d(storage(d2x(Arg(1)),4))          /*@                */
/*
.  ----------------------------------------------------------------- */
stg:  Return storage(d2x(Arg(1)),Arg(2))          /*@                */
/*
.  ----------------------------------------------------------------- */
SWAREQ:  Procedure                     /*@                           */
If right(c2x(Arg(1)),1) \= 'F' Then    /* SWA=BELOW ?                */
  Return c2d(Arg(1))+16                /* yes, return sva+16         */
sva = c2d(Arg(1))                      /* convert to decimal         */
tcb = c2d(storage(21c,4))              /* TCB PSATOLD                */
tcb = ptr(540)                         /* TCB PSATOLD                */
jscb = ptr(tcb+180)                    /* JSCB TCBJSCB               */
qmpl = ptr(jscb+244)                   /* QMPL JSCBQMPI              */
qmat = ptr(qmpl+24)                    /* QMAT QMADD                 */
Do While sva>65536
  qmat = ptr(qmat+12)                  /* next QMAT QMAT+12          */
  sva=sva-65536                        /* 010006F -> 000006F         */
End
return ptr(qmat+sva+1)+16              /*@ SWAREQ                    */
/*
.  ----------------------------------------------------------------- */
BRANCH: Procedure expose,              /*@                           */
        sigl exec_name
   rc = trace("O")                     /* we do not want to see this */
   arg brparm .

   origin = sigl                       /* where was I called from ?  */
   do currln = origin to 1 by -1       /* inch backward to label     */
      if Right(Word(Sourceline(currln),1),1) = ":" then do
         parse value sourceline(currln) with pgfname ":" .  /* Label */
         leave ; end                   /*                name        */
   end                                 /* currln                     */

   select
      when brparm = "NAME" then return(pgfname) /* Return full name  */
      when brparm = "ID"      then do           /* wants the prefix  */
         parse var pgfname pgfpref "_" .        /* get the prefix    */
         return(pgfpref)
         end                           /* brparm = "ID"              */
      otherwise
         say left(sigl,6) left(pgfname,40) exec_name "Time:" time("L")
   end                                 /* select                     */

return                                 /*@ BRANCH                    */
/*
.  ----------------------------------------------------------------- */
DUMP_QUEUE:                            /*@ Take whatever is in stack */
   rc = trace("O")                     /*  and write to the screen   */
   address TSO
   arg mode .

   "QSTACK"                            /* how many stacks?           */
   stk2dump    = rc - tk_init_stacks   /* remaining stacks           */
   if stk2dump = 0 & queued() = 0 then return
   if mode <> "QUIET" then,
   say "Total Stacks" rc ,             /* rc = #of stacks            */
    "   Begin Stacks" tk_init_stacks , /* Stacks present at start    */
    "   Excess Stacks to dump" stk2dump

   do dd = rc to tk_init_stacks by -1  /* empty each one.            */
      if mode <> "QUIET" then,
      say "Processing Stack #" dd "   Total Lines:" queued()
      do queued();parse pull line;say line;end /* pump to the screen */
      "DELSTACK"                       /* remove stack               */
   end                                 /* dd = 1 to rc               */

return                                 /*@ DUMP_QUEUE                */
/* Handle CLIST-form keywords             added 20020513
.  ----------------------------------------------------------------- */
CLKWD: Procedure expose info           /*@ hide all except info      */
   arg kw
   kw = kw"("                          /* form is 'KEY(DATA)'        */
   kw_pos = Pos(kw,info)               /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   rtpt   = Pos(") ",info" ",kw_pos)   /* locate end-paren           */
   slug   = Substr(info,kw_pos,rtpt-kw_pos+1)     /* isolate         */
   info   = Delstr(info,kw_pos,rtpt-kw_pos+1)     /* excise          */
   parse var slug (kw)     slug        /* drop kw                    */
   slug   = Reverse(Substr(Reverse(Strip(slug)),2))
return slug                            /*@CLKWD                      */
/* Handle multi-word keys 20020513
.  ----------------------------------------------------------------- */
KEYWD: Procedure expose info           /*@ hide all vars, except info*/
   arg kw
   kw_pos = wordpos(kw,info)           /* find where it is, maybe    */
   if kw_pos = 0 then return ""        /* send back a null, not found*/
   kw_val = word(info,kw_pos+Words(kw))/* get the next word          */
   info   = Delword(info,kw_pos,2)     /* remove both                */
return kw_val                          /*@ KEYWD                     */
/*
.  ----------------------------------------------------------------- */
KEYPHRS: Procedure expose,             /*@                           */
         info helpmsg exec_name        /*  except these three        */
   arg kp
   wp    = wordpos(kp,info)            /* where is it?               */
   if wp = 0 then return ""            /* not found                  */
   front = subword(info,1,wp-1)        /* everything before kp       */
   back  = subword(info,wp+1)          /* everything after kp        */
   parse var back dlm back             /* 1st token must be 2 bytes  */
   if length(dlm) <> 2 then            /* Must be two bytes          */
      helpmsg = helpmsg,
         "Invalid length for delimiter("dlm") with KEYPHRS("kp")"
   if wordpos(dlm,back) = 0 then       /* search for ending delimiter*/
      helpmsg = helpmsg,
         "No matching second delimiter("dlm") with KEYPHRS("kp")"
   if helpmsg <> "" then call HELP     /* Something is wrong         */
   parse var back kpval (dlm) back     /* get everything b/w delim   */
   info =  front back                  /* restore remainder          */
return Strip(kpval)                    /*@ KEYPHRS                   */
/*
.  ----------------------------------------------------------------- */
NOVALUE:                               /*@                           */
   say exec_name "raised NOVALUE at line" sigl
   say " "
   say "The referenced variable is" condition("D")
   say " "
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ NOVALUE                   */
/*
.  ----------------------------------------------------------------- */
SHOW_SOURCE:                           /*@                           */
   call DUMP_QUEUE                     /* Spill contents of stacks  -*/
   if sourceline() <> "0" then         /* to screen                  */
      say sourceline(zsigl)
   rc =  trace("?R")
   nop
   exit                                /*@ SHOW_SOURCE               */
/*
.  ----------------------------------------------------------------- */
SS: Procedure                          /*@ Show Source               */
   arg  ssbeg  ssend  .
   if ssend = "" then ssend = 10
   if \datatype(ssbeg,"W") | \datatype(ssend,"W") then return
   ssend = ssbeg + ssend
   do ssii = ssbeg to ssend ; say Strip(sourceline(ssii),'T') ; end
return                                 /*@ SS                        */
/*
.  ----------------------------------------------------------------- */
SWITCH: Procedure expose info          /*@                           */
   arg kw
   sw_val = Wordpos(kw,info) > 0       /* exists = 1; not found = 0  */
   if sw_val then                      /* exists                     */
      info = Delword(info,Wordpos(kw,info),1) /* remove it           */
return sw_val                          /*@ SWITCH                    */
/*
.  ----------------------------------------------------------------- */
SYNTAX:                                /*@                           */
   errormsg = exec_name "encountered REXX error" rc "in line" sigl":",
                        errortext(rc)
   say errormsg
   zsigl = sigl
   signal SHOW_SOURCE                  /*@ SYNTAX                    */
/*
   Can call TRAPOUT.
.  ----------------------------------------------------------------- */
TOOLKIT_INIT:                          /*@                           */
   address TSO
   info = Strip(opts,"T",")")          /* clip trailing paren        */

   parse source  sys_id  how_invokt  exec_name  DD_nm  DS_nm,
                     as_invokt  cmd_env  addr_spc  usr_tokn

   parse value "" with  tv  helpmsg  .
   parse value 0   "ISR00000  YES"     "Error-Press PF1"    with,
               sw.  zerrhm    zerralrm  zerrsm

   if SWITCH("TRAPOUT") then do
      "TRAPOUT" exec_name parms "(( TRACE R" info
      exit
      end                              /* trapout                    */

   sw.nested    = sysvar("SYSNEST") = "YES"
   sw.batch     = sysvar("SYSENV")  = "BACK"
   sw.inispf    = sysvar("SYSISPF") = "ACTIVE"

   if Word(parms,1) = "?" then call HELP /* I won't be back          */

   "QSTACK" ; tk_init_stacks = rc      /* How many stacks?           */

   parse value SWITCH("BRANCH") SWITCH("MONITOR") SWITCH("NOUPDT") with,
               branch           monitor           noupdt    .

   parse value mvsvar("SYSNAME") sysvar("SYSNODE") with,
               #tk_cpu           node          .

   parse value KEYWD("TRACE")  "N"    with   tv  .
   tk_globalvars = "exec_name  tv  helpmsg  sw.  zerrhm  zerralrm ",
                   "zerrsm  zerrlm  tk_init_stacks  branch  monitor ",
                   "noupdt"

   call LOCAL_PREINIT                  /* for more opts             -*/

return                                 /*@ TOOLKIT_INIT              */
/*
))) PLIB     TBLSPEC   Get ISPF-related info
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH ) SKIP( ON )
  + TYPE( TEXT   ) INTENS( LOW  ) SKIP( ON )
  _ TYPE( INPUT  ) INTENS( LOW  ) CAPS( ON  )
  ~ TYPE( TEXT   ) INTENS( HIGH ) COLOR( YELLOW )
  ! TYPE( INPUT  ) INTENS( NON  )
)BODY EXPAND(||) WIDTH(&ZSCREENW)
~|-|% Acquire REORDER parms ~|-|
%COMMAND ===>_ZCMD
                                                             %SCROLL ===>_ZAMT+
+
+     Table name ===>_@tn@    +
+        Library ===>_isptlib                                       +
+
+         Family ===>_base        +
+
+ Input sequence ===>_inseq   +
+
 Output sequence ===>_outseq  +
+
)INIT
      .HELP = TBLSPECH
)PROC
)END
))) PLIB     TBLSPECH  ..
)ATTR
  % TYPE( TEXT   ) INTENS( HIGH ) SKIP( ON ) COLOR( YELLOW )
  + TYPE( TEXT   ) INTENS( LOW  ) SKIP( ON )
  _ TYPE( INPUT  ) INTENS( HIGH )
  ! TYPE( OUTPUT ) INTENS( HIGH ) SKIP( ON )
  @ TYPE( OUTPUT ) INTENS( LOW  ) SKIP( ON )
  } AREA( SCRL   )         EXTEND( ON )
)BODY EXPAND(||) WIDTH(&ZSCREENW)
%TUTORIAL |-| Acquire REORDER parms |-| TUTORIAL
%Command ===>_ZCMD
                                                                               +
}hlptxt                                                                        }
)AREA HLPTXT
+
+   Enter the%table name+of the FT-type table to be operated on.
+   Enter the%dataset name+of the library in which the table is located.
+
+   Enter the key of the%parent+segment to identify the%family+
+
+   Input sequence: the%next+character following the%parent+key.  You may enter
+         more than one character if there are several 'child' segments to be
+         rearranged.
+
+   Output sequence: the%next+character that%should+ follow the%parent+key.
+         There should be the same number of characters on output as there are
+         on input.
+
+   Example:   the%parent+sequence is%'ADFC'.+
+         The 2nd, 3d, and 5th children%(BCE)+are in the wrong spots.
+         They should be 5th, 2nd, and 3rd,%(EBC)+respectively.
+         All%ADFCB*+will be changed to%ADFC1*,+ADFCC* to ADFC2*, and ADFCE* to
+         ADFC3*.  Then all%ADFC1*+will be changed to%ADFCE*,+ADFC2* to ADFCB*,
+         and ADFC3* to ADFCC*.
+
)PROC
   &ZCONT = TBLSPECH
   &ZUP   = TBLSPECH
)END
*/
